name: CI/CD for Lightsail with Docker

on:
  push:
    branches:
      - master

jobs:
  # Job 1: Build Docker Image
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest

    steps:

      - name: Delete Old Artifacts
        run: |
          echo "Deleting old artifacts..."
          ARTIFACT_IDS=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                          -H "Accept: application/vnd.github.v3+json" \
                          https://api.github.com/repos/${{ github.repository }}/actions/artifacts \
                     | jq -r '.artifacts[]? | select(.expired == false) | .id')
          if [ -z "$ARTIFACT_IDS" ]; then
            echo "No artifacts to delete."
          else
            echo "$ARTIFACT_IDS" | xargs -I {} curl -s -X DELETE \
                 -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                 -H "Accept: application/vnd.github.v3+json" \
                 https://api.github.com/repos/${{ github.repository }}/actions/artifacts/{}
          fi
               
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Docker 
        uses: docker/setup-buildx-action@v2
      

      - name: Check Docker Version
        run: |
          docker --version  # Docker 버전 확인

      - name: Build Docker Image
        run: |
          docker build -t my-app:latest .

      - name: Save Docker Image as Tar
        run: |
          sudo mkdir -p /home/${{ secrets.LIGHTSAIL_USERNAME }}  # 디렉토리 생성
          sudo docker save my-app:latest -o /home/${{ secrets.LIGHTSAIL_USERNAME }}/my-app.tar
          sudo chmod 777 /home/${{ secrets.LIGHTSAIL_USERNAME }}/my-app.tar  # 모든 사용자에게 읽기/쓰기 권한 부여
          ls -lh /home/${{ secrets.LIGHTSAIL_USERNAME }}/my-app.tar  # 파일 존재 여부 확인




      - name: Upload Docker Tar Artifact
        uses: actions/upload-artifact@v3
        with:
          name: my-app-tar
          path: /home/ubuntu/my-app.tar  # 절대 경로로 지정


  # Job 2: Transfer Docker Image to Lightsail
  transfer:
    name: Transfer Docker Image
    runs-on: ubuntu-latest

    needs: build  # Dependency on the build job
    steps:
      - name: Download Docker Tar Artifact
        uses: actions/download-artifact@v3
        with:
          name: my-app-tar
  
      - name: Verify Downloaded File
        run: |
          echo "Verifying downloaded file:"
          ls -lh ./my-app.tar  # 디버깅용 확인

      - name: Transfer Docker Image to Lightsail
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.LIGHTSAIL_HOST }}
          username: ${{ secrets.LIGHTSAIL_USERNAME }}
          key: ${{ secrets.LIGHTSAIL_SSH_KEY }}
          source: ./my-app.tar
          target: /home/${{ secrets.LIGHTSAIL_USERNAME }}/my-app.tar

      - name: Verify Transferred File on Lightsail
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.LIGHTSAIL_HOST }}
          username: ${{ secrets.LIGHTSAIL_USERNAME }}
          key: ${{ secrets.LIGHTSAIL_SSH_KEY }}
          script: |
            echo "Verifying transferred file on server:"
            ls -lh /home/${{ secrets.LIGHTSAIL_USERNAME }}/my-app.tar || exit 1

  # Job 3: Deploy Docker Container
  deploy:
    name: Deploy Docker Container
    runs-on: ubuntu-latest

    needs: transfer  # Dependency on the transfer job
    steps:
      - name: Run Docker Image on Lightsail
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.LIGHTSAIL_HOST }}
          username: ${{ secrets.LIGHTSAIL_USERNAME }}
          key: ${{ secrets.LIGHTSAIL_SSH_KEY }}
          script: |
            echo "Starting deployment process..."

            # Step 1: Load the Docker image
            echo "Loading Docker image..."
            docker load -i /home/${{ secrets.LIGHTSAIL_USERNAME }}/my-app.tar/my-app.tar || exit 1

            # Step 2: Stop and remove existing container if any
            echo "Stopping and removing any existing container..."
            docker stop my-app || true
            docker rm my-app || true

            # Step 3: Run the container on port 8080
            echo "Running the container on port 8080..."
            docker run -d --name my-app -p 80:8080 --restart unless-stopped my-app:latest || exit 1

            echo "Deployment completed successfully!"
