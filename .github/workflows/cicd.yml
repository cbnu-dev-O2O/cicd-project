name: CI/CD for Lightsail with Docker

on:
  push:
    branches:
      - master

jobs:
  # Job 1: Build Docker Image
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Build Docker Image
        run: |
          docker build -t my-app:latest .

      - name: Save Docker Image as Tar
        run: |
          docker save my-app:latest -o my-app.tar

      - name: Upload Docker Tar Artifact
        uses: actions/upload-artifact@v3
        with:
          name: my-app-tar
          path: my-app.tar

  # Job 2: Transfer Docker Image to Lightsail
  transfer:
    name: Transfer Docker Image
    runs-on: ubuntu-latest
  
    needs: build  # Dependency on the build job
    steps:
      - name: Download Docker Tar Artifact
        uses: actions/download-artifact@v3
        with:
          name: my-app-tar
  
      - name: Check downloaded artifact
        run: ls -lh  # 디버깅을 위해 다운로드한 파일을 확인
  
      - name: Transfer Docker Image to Lightsail
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.LIGHTSAIL_HOST }}
          username: ${{ secrets.LIGHTSAIL_USERNAME }}
          key: ${{ secrets.LIGHTSAIL_SSH_KEY }}
          source: ./my-app.tar  # 파일 경로가 정확한지 확인
          target: /home/${{ secrets.LIGHTSAIL_USERNAME }}/my-app.tar


  # Job 3: Deploy Docker Container
  deploy:
    name: Deploy Docker Container
    runs-on: ubuntu-latest

    needs: transfer  # Dependency on the transfer job
    steps:
      - name: Run Docker Image on Lightsail
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.LIGHTSAIL_HOST }}
          username: ${{ secrets.LIGHTSAIL_USERNAME }}
          key: ${{ secrets.LIGHTSAIL_SSH_KEY }}
          script: |
            # Step 1: Load the Docker image
            docker load -i /home/${{ secrets.LIGHTSAIL_USERNAME }}/my-app.tar

            # Step 2: Stop and remove existing container if any
            docker stop app || true
            docker rm app || true

            # Step 3: Run the container on port 8080
            docker run -d --name app -p 8080:8080 --restart unless-stopped my-app:latest

            # Step 4: Ensure Nginx is forwarding traffic from port 80 to 8080
            sudo systemctl restart nginx
